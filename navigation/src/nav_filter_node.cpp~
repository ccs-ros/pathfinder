/*	Navigation Filter V1
 *  nav_filter_node.cpp
 *
 *	Author: Jared Strader and Kyle Lassack
 *  Created On: 4/9/14
 *	Updated On: 4/11/14
 *
 *	Descrption: Navigation filter with slip detection
 *
 *	Inputs: encoders 4 wheels, gyro 3 axis, accel 3 axis, stop/start flags
 *	Outputs: slip 4 wheels, allSlipFlag, attitude, distance, bearing velocity
 */

#include <ros/ros.h>
#include <navigation/FilterInput.h>
#include <navigation/FilterOutput.h>
#include <navigation/IMUData.h>
#include <roboteq_interface/speed1_data.h>
#include <roboteq_interface/speed2_data.h>
#include <armadillo>

using namespace std;

//Constants
static const char IMU_TOPIC[] = "mis/imu_data"; //ax, ay, az, p, q, r
static const char ENCODER_TOPIC1[] = "mis/speed1_data"; //left side back wheels
static const char ENCODER_TOPIC2[] = "mis/speed2_data"; //right side back wheels
static const char ENCODER_TOPIC3[] = "nav/temp_data"; //front wheels
static const char STATE_TOPIC[] = "nav/temp_data"; //turnFlag, stopFlag
static const char OUTPUT_TOPIC[] = "nav/filter_output";
const float PI = 3.14159265;

class Sensors //Class containing callback function for data coming into filter
{
public:
  ros::Subscriber sub1, sub2, sub3;
  float encFL, encFR, encBL, encBR, stopFlag, turnFlag;
  float rpmFL, rpmFR, rpmBL, rpmBR;
  float p, q, r, ax, ay, az;

  Sensors() : encFL(0), encFR(0), encBL(0), encBR(0), stopFlag(0),
  				 
  				turnFlag(0), p(0), q(0), r(0), ax(0), ay(0), az(0)
  {
    ros::NodeHandle node;
    sub1 = node.subscribe(IMU_TOPIC, 1, &Sensors::getIMUCallback, this);
    sub2 = node.subscribe(ENCODER_TOPIC1, 1, &Sensors::getEncoder1Callback, this);
    sub3 = node.subscribe(ENCODER_TOPIC2, 1, &Sensors::getEncoder2Callback, this);

  }

  //void getIMUCallback(const navigation::IMUData::ConstPtr &msg) {
  void getIMUCallback(const navigation::FilterInput::ConstPtr &msg) {
    //this->p = msg->Gx;
    //this->q = msg->Gy;
    //this->r = msg->Gz;
    //this->ax = msg->Ax;
    //this->ay = msg->Ay;
    //this->az = msg->Az;
    this->p = msg->p;
    this->q = msg->q;
    this->r = msg->r;
    this->ax = msg->ax;
    this->ay = msg->ay;
    this->az = msg->az;
  }
  
  void getEncoder1Callback(const roboteq_interface::speed1_data::ConstPtr &msg) {
    this->encFL = msg->motor_1_encoder_count;
    this->encBL = msg->motor_2_encoder_count;
  }
  
    void getEncoder2Callback(const roboteq_interface::speed2_data::ConstPtr &msg) {
    this->encFR = msg->motor_1_encoder_count;
    this->encBR = msg->motor_2_encoder_count;
  }
  
    void getEncoder3Callback(const navigation::FilterInput::ConstPtr &msg) {
  //void getEncoder3Callback(const navigation::FilterInput::ConstPtr &msg) {
  }
  
  void getStateCallback(const navigation::FilterInput::ConstPtr &msg) {
  //void getStateCallback(const navigation::FilterInput::ConstPtr &msg) { 
    this->stopFlag = msg->stopFlag;
    this->turnFlag = msg->turnFlag;
  }
};

int main(int argc, char **argv)
{
	//Node Initialization
    ros::init(argc, argv, "nav_filter_node");
    ros::NodeHandle nh;
    ros:: Publisher pub = nh.advertise<navigation::FilterOutput>(OUTPUT_TOPIC,1);
    
    ROS_INFO("nav_filter_node running...");
    
    navigation::FilterOutput outData; 	//structure for output data
    Sensors inData;						//structure for input data
    
    //Local Constants
	const float dist_W = 18; //inches pathfinder
	const float radius_W= 3.25; //inches
	const float dw1 = -9; //inches pathfinder
	const float dw2 =  9; //inches pathfinder
	const float dw3 = -9; //inches pathfinder
	const float dw4 =  9; //inches pathfinder 
	const float Q_WE = 0.01;
	const long int wheel_max = 2147483647;
	
	// Initial Conditions
	arma::mat Q_eq_IMU = 0.01*arma::eye<arma::mat>(6,6);
	arma::mat P = arma::eye<arma::mat>(5,5);
	
	float V_prev = 0.0;
	float P_v_prev = 0.0;
	float phi = 0.0;	//roll
	float theta = 0.0;	//pitch
	float psi = 0.0;	//yaw
	float d = 1000.0;		//polar distance
	float gamma = 0.0;	//bearing
		
	// Initialization
	float Q_deltaD, deltaD, deltaR;
	float V, P_v;
	float WE1, WE2, WE3, WE4;
	float WE1_pred_V, WE2_pred_V, WE3_pred_V, WE4_pred_V;
	float Slip1, Slip2, Slip3, Slip4, All_Slip_Flag;
	float P_v_thresh, Q_r_thresh;
	float phi_km, theta_km, psi_km, d_km, gamma_km;
	float phi_k, theta_k, psi_k, d_k, gamma_k;
	
	arma::mat Q(4,4);
	arma::mat A(5,5);
	arma::mat W(5,4);
	arma::mat P_km(5,5);
	arma::vec x_km(5);
	arma::mat Y_tilt(3,1);
	arma::mat H_tilt(3,5);
    arma::mat Z_tilt(3,1);
    arma::mat y_tilt(3,1);
    arma::mat R_tilt(3,3);
    arma::mat S_tilt(3,3); 
    arma::mat K_tilt(5,3);
    
   	ros::Duration(2).sleep();
   	float WE1pr=inData.encFL;
   	float WE2pr=inData.encFR;
   	float WE3pr=inData.encBL;
   	float WE4pr=inData.encBR;
   	
   	
    while(ros::ok())
    {
    	//Change in time
    	float Ts=0.02;
    
    	//Velocity integration and covariance
		V = V_prev+Ts*inData.ax;
		P_v = P_v_prev+Ts*Ts*Q_eq_IMU(0,0);
		
		//Number of encoder counts since last loop
		WE1=inData.encFL-WE1pr;
		WE2=inData.encFR-WE2pr;
		WE3=inData.encBL-WE3pr;
		WE4=inData.encBR-WE4pr;
		
		if(abs(WE1)>1000000)
		{
			if (WE1pr > 0) WE1 = (wheel_max-WE1pr)+(inData.encFL+wheel_max);
			else WE1 = (-wheel_max-WE1pr)+(wheel_max-inData.encFL);
		}
		
		if(abs(WE2)>1000000)
		{
			if (WE2pr > 0) WE2 = (wheel_max-WE2pr)+(inData.encFL+wheel_max);
			else WE2 = (-wheel_max-WE2pr)+(wheel_max-inData.encFL);
		}
		
		if(abs(WE3)>1000000)
		{
			if (WE3pr > 0) WE3 = (wheel_max-WE3pr)+(inData.encFL+wheel_max);
			else WE3 = (-wheel_max-WE3pr)+(wheel_max-inData.encFL);
		}
		
		if(abs(WE4)>1000000)
		{
			if (WE4pr > 0) WE4 = (wheel_max-WE4pr)+(inData.encFL+wheel_max);
			else WE4 = (-wheel_max-WE4pr)+(wheel_max-inData.encFL);
		}
			
		//Store data for next iteration
		WE1pr = inData.encFL;//(inData.encFL/130500)*2*PI*radius_W;
		WE2pr = inData.encFR;//(inData.encFR/130500)*2*PI*radius_W;
		WE3pr = inData.encBL;//(inData.encBL/130500)*2*PI*radius_W;
		WE4pr = inData.encBR;//(inData.encBR/130500)*2*PI*radius_W;
		
		WE1=(WE1/130500)*2*radius_W*PI;
		WE2=(WE2/130500)*2*radius_W*PI;
		WE3=(WE3/130500)*2*radius_W*PI;
		WE4=(WE4/130500)*2*radius_W*PI;
		
		//Slip flags (1 no slip, 0 slip)
		Slip1 = 1;
		Slip2 = 1; 
		Slip3 = 1; 
		Slip4 = 1; 
		All_Slip_Flag = 0;
		
		//Wheel encoder velocity
		WE1_pred_V = (WE1/Ts+inData.r*dw1);
		WE2_pred_V = (WE2/Ts+inData.r*dw2);
		WE3_pred_V = (WE3/Ts+inData.r*dw3);
		WE4_pred_V = (WE4/Ts+inData.r*dw4);
		
		P_v_thresh = 2*(P_v+Q_WE+Q_eq_IMU(3,3)*dist_W/4);
		Q_r_thresh = 4*(Q_WE+Q_eq_IMU(3,3)*dist_W/4);
		
		/*
		//Check for individual wheel slip from encoders/IMU integration
		if(abs(V-WE1_pred_V)>P_v_thresh || min(abs(WE1_pred_V-WE2_pred_V), abs(WE1_pred_V-WE4_pred_V))>Q_r_thresh) Slip1=0; //FL wheel
		if(abs(V-WE2_pred_V)>P_v_thresh || min(abs(WE2_pred_V-WE1_pred_V), abs(WE2_pred_V-WE3_pred_V))>Q_r_thresh) Slip2=0; //FR wheel
		if(abs(V-WE3_pred_V)>P_v_thresh || min(abs(WE3_pred_V-WE2_pred_V), abs(WE3_pred_V-WE4_pred_V))>Q_r_thresh) Slip3=0; //BL wheel
		if(abs(V-WE4_pred_V)>P_v_thresh || min(abs(WE4_pred_V-WE1_pred_V), abs(WE4_pred_V-WE3_pred_V))>Q_r_thresh) Slip4=0; //BR wheel
		*/
		
		if (Slip1 + Slip3 != 0 && Slip2 + Slip4 != 0) 
		{
			deltaD  = ((Slip1*WE1+Slip3*WE3)/(Slip1+Slip3)+(Slip2*WE2+Slip4*WE4)/(Slip2+Slip4))/2;
			V = deltaD/Ts;
			Q_deltaD = (1/(Slip1/Q_WE+Slip3/Q_WE)+1/(Slip2/Q_WE+Slip4/Q_WE))/4;
			P_v = Q_deltaD/(Ts*Ts);
			cout << WE1 << endl;
		}
		else
		{
			All_Slip_Flag = 1;
			deltaD = Ts*V;
			Q_deltaD = P_v*Ts*Ts;
		}
		
		if (inData.stopFlag == 1)
		{
    		deltaD = 0;
   			V = 0;
    		Q_deltaD = Q_WE;
    		P_v = Q_deltaD/(Ts*Ts);
    	}
    	
    	Q = arma::zeros<arma::mat>(4,4);
    	Q(0,0)= Q_eq_IMU(3,3);
    	Q(1,1)= Q_eq_IMU(4,4);
    	Q(2,2)= Q_eq_IMU(5,5);
    	Q(3,3)= Q_deltaD;
    	
		P_km = P;
		x_km = 10*arma::ones<arma::vec>(5);

/***************************************************************************/
		//This is for no IMU measurements
		deltaR  = ((Slip1*WE1+Slip3*WE3)/(Slip1+Slip3)-(Slip2*WE2+Slip4*WE4)/(Slip2+Slip4))/dist_W;
		inData.r= deltaR/Ts;
/***************************************************************************/
		if (inData.stopFlag == 0 && inData.turnFlag == 0)
		{
			x_km(0) = phi+Ts*(inData.p+inData.q*sin(phi)*tan(theta)+inData.r*cos(phi)*tan(theta));
			x_km(1) = theta+Ts*(inData.q*cos(phi)-inData.r*sin(phi));
			x_km(2) = psi+Ts*(inData.q*sin(phi)+inData.r*cos(phi))*(1/cos(theta));
			x_km(3) = d+cos(gamma)*cos(theta)*cos(psi)*deltaD+sin(gamma)*cos(theta)*sin(psi)*deltaD;
			x_km(4) = gamma+cos(gamma)*cos(theta)*sin(psi)*deltaD/d-sin(gamma)*cos(theta)*cos(psi)*deltaD/d;
		   
			A(0,0)=Ts*(inData.q*cos(phi)*tan(theta) - inData.r*sin(phi)*tan(theta))+1;
			A(0,1)=Ts*(inData.r*cos(phi)*((tan(theta)*tan(theta)) + 1) + inData.q*sin(phi)*((tan(theta)*tan(theta)) + 1));
			A(0,2)=0;
			A(0,3)=0;
			A(0,4)=0;
			A(1,0)=-Ts*(inData.r*cos(phi) + inData.q*sin(phi));
			A(1,1)=1;
			A(1,2)=0;
			A(1,3)=0;
			A(1,4)=0;
			A(2,0)=(Ts*(inData.q*cos(phi) - inData.r*sin(phi)))/cos(theta);
			A(2,1)=(Ts*sin(theta)*(inData.r*cos(phi) + inData.q*sin(phi)))/(cos(theta)*cos(theta));
			A(2,2)=1;
			A(2,3)=0;
			A(2,4)=0;
			A(3,0)=0;
			A(3,1)=-deltaD*cos(gamma)*cos(psi)*sin(theta) - deltaD*sin(gamma)*sin(psi)*sin(theta);;
			A(3,2)=deltaD*cos(psi)*cos(theta)*sin(gamma) - deltaD*cos(gamma)*cos(theta)*sin(psi);
			A(3,3)=1;
			A(3,4)=deltaD*cos(gamma)*cos(theta)*sin(psi) - deltaD*cos(psi)*cos(theta)*sin(gamma);
			A(4,0)=0;
			A(4,1)=(deltaD*cos(psi)*sin(gamma)*sin(theta))/d - (deltaD*cos(gamma)*sin(psi)*sin(theta))/d;
			A(4,2)=(deltaD*cos(theta)*sin(gamma)*sin(psi))/d + (deltaD*cos(gamma)*cos(psi)*cos(theta))/d;
			A(4,3)=(deltaD*cos(psi)*cos(theta)*sin(gamma))/(d*d) - (deltaD*cos(gamma)*cos(theta)*sin(psi))/(d*d);
			A(4,4)=1 - (deltaD*cos(gamma)*cos(psi)*cos(theta))/d - (deltaD*cos(theta)*sin(gamma)*sin(psi))/d;
		   
			W(0,0)=Ts;
			W(0,1)=Ts*sin(phi)*tan(theta);
			W(0,2)=Ts*cos(phi)*tan(theta);
			W(0,3)=0;
			W(1,0)=0;
			W(1,1)=Ts*cos(phi);
			W(1,2)=-Ts*sin(phi);
			W(1,3)=0;
			W(2,0)=0;
			W(2,1)=(Ts*sin(phi))/cos(theta);
			W(2,2)=(Ts*cos(phi))/cos(theta);
			W(2,3)=0;
			W(3,0)=0;
			W(3,1)=0;
			W(3,2)=0;
			W(3,3)=cos(gamma)*cos(psi)*cos(theta) + cos(theta)*sin(gamma)*sin(psi);
			W(4,0)=0;
			W(4,1)=0;
			W(4,2)=0;
			W(4,3)=(cos(gamma)*cos(theta)*sin(psi))/d - (cos(psi)*cos(theta)*sin(gamma))/d;
		
			P_km = A*P*A.st()+W*Q*W.st();
		
			phi_km   = x_km(0);
			theta_km = x_km(1);
			psi_km   = x_km(2);
			d_km     = x_km(3);
			gamma_km = x_km(4);
		}

		else if (inData.stopFlag == 1)
		{
			x_km(0) = phi;
			x_km(1) = theta;
			x_km(2) = psi;
			x_km(3) = d;
			x_km(4) = gamma;
		
			phi_km   = x_km(0);
			theta_km = x_km(1);
			psi_km   = x_km(2);
			d_km     = x_km(3);
			gamma_km = x_km(4);
		
			Y_tilt(0,0)=cos(theta_km)*inData.ax+sin(phi_km)*sin(theta_km)*inData.ay+cos(phi_km)*sin(theta_km)*inData.az;
			Y_tilt(1,0)=cos(phi_km)*inData.ay-sin(phi_km)*inData.az;
			Y_tilt(2,0)=-sin(theta_km)*inData.ax+cos(theta_km)*sin(phi_km)*inData.ay+cos(phi_km)*cos(theta_km)*inData.az;
		
			H_tilt(0,0)=inData.ay*cos(phi_km)*sin(theta_km)-inData.az*sin(phi_km)*sin(theta_km);
			H_tilt(0,1)=inData.az*cos(phi_km)*cos(theta_km)-inData.ax*sin(theta_km)+inData.ay*cos(theta_km)*sin(phi_km);
			H_tilt(0,2)=0;
			H_tilt(0,3)=0;
			H_tilt(0,4)=0;
			H_tilt(1,0)=-inData.az*cos(phi_km)-inData.ay*sin(phi_km);
			H_tilt(1,1)=0;
			H_tilt(1,2)=0;
			H_tilt(1,3)=0;
			H_tilt(1,4)=0;
			H_tilt(2,0)=inData.ay*cos(phi_km)*cos(theta_km)-inData.az*cos(theta_km)*sin(phi_km);
			H_tilt(2,1)=-inData.ax*cos(theta_km)-inData.az*cos(phi_km)*sin(theta_km)-inData.ay*sin(phi_km)*sin(theta_km);
			H_tilt(2,2)=0;
			H_tilt(2,3)=0;
			H_tilt(2,4)=0;
		
			Z_tilt(0,0)=0;
			Z_tilt(1,0)=0;
			Z_tilt(2,0)=9.81;
		
			y_tilt = Z_tilt-Y_tilt;
			R_tilt = Q_eq_IMU.submat(1,1,3,3);
			S_tilt = H_tilt*P_km*H_tilt.st()+R_tilt; //Assume noise about same each axis, the additive assumption is safe
			K_tilt = P_km*H_tilt.st()*arma::inv(S_tilt);
		
			x_km = x_km+K_tilt*y_tilt;
			P_km = (arma::eye<arma::mat>(5,5)-K_tilt*H_tilt)*P_km;
		}

		else if (inData.turnFlag == 1)
		{
			x_km(0) = phi+Ts*(inData.p+inData.q*sin(phi)*tan(theta)+inData.r*cos(phi)*tan(theta));
			x_km(1) = theta+Ts*(inData.q*cos(phi)-inData.r*sin(phi));
			x_km(2) = psi+Ts*(inData.q*sin(phi)+inData.r*cos(phi))*(1/cos(theta));
			x_km(3) = d;
			x_km(4) = gamma;
		
			A(0,0)=Ts*(inData.q*cos(phi)*tan(theta) - inData.r*sin(phi)*tan(theta))+1;
			A(0,1)=Ts*(inData.r*cos(phi)*((tan(theta)*tan(theta)) + 1) + inData.q*sin(phi)*((tan(theta)*tan(theta)) + 1));
			A(0,2)=0;
			A(0,3)=0;
			A(0,4)=0;
			A(1,0)=-Ts*(inData.r*cos(phi) + inData.q*sin(phi));
			A(1,1)=1;
			A(1,2)=0;
			A(1,3)=0;
			A(1,4)=0;
			A(2,0)=(Ts*(inData.q*cos(phi) - inData.r*sin(phi)))/cos(theta);
			A(2,1)=(Ts*sin(theta)*(inData.r*cos(phi) + inData.q*sin(phi)))/(cos(theta)*cos(theta));
			A(2,2)=1;
			A(2,3)=0;
			A(2,4)=0;
			A(3,0)=0;
			A(3,1)=1;
			A(3,2)=0;
			A(3,3)=1;
			A(3,4)=0;
			A(4,0)=0;
			A(4,1)=0;
			A(4,2)=0;
			A(4,3)=0;
			A(4,4)=1;
		   
			W(0,0)=Ts;
			W(0,1)=Ts*sin(phi)*tan(theta);
			W(0,2)=Ts*cos(phi)*tan(theta);
			W(0,3)=0;
			W(1,0)=0;
			W(1,1)=Ts*cos(phi);
			W(1,2)=-Ts*sin(phi);
			W(1,3)=0;
			W(2,0)=0;
			W(2,1)=(Ts*sin(phi))/cos(theta);
			W(2,2)=(Ts*cos(phi))/cos(theta);
			W(2,3)=0;
			W(3,0)=0;
			W(3,1)=0;
			W(3,2)=0;
			W(3,3)=0;
			W(4,0)=0;
			W(4,1)=0;
			W(4,2)=0;
			W(4,3)=0;
		
			P_km = A*P*A.st()+W*Q*W.st();
		
			phi_km   = x_km(0);
			theta_km = x_km(1);
			psi_km   = x_km(2);
			d_km     = x_km(3);
			gamma_km = x_km(4);
		}
		//Update states
		arma::mat P_k = P_km;
		phi_k   = x_km(0);
		theta_k = x_km(1);
		psi_k   = x_km(2);
		d_k     = x_km(3);
		gamma_k = x_km(4);
		
		//Feedback data
		phi=phi_k;
		theta=theta_k;
		psi=psi_k;
		d=d_k;
		gamma=gamma_k;
		P=P_k;
		
		//Output data
		outData.velocity=V;
    	outData.noSlipFL=Slip1;
    	outData.noSlipFR=Slip2;
    	outData.noSlipBL=Slip3;
    	outData.noSlipBR=Slip4;
    	outData.allSlipFlag=All_Slip_Flag;
    	outData.deltaDistance=deltaD;
    	outData.roll=phi_k;
    	outData.pitch=theta_k;
    	outData.yaw=psi_k;
    	outData.distance=d_k;
    	outData.bearing=gamma_k;
    	
    	//Publish output
    	pub.publish(outData);
    	
		ros::spinOnce();
		ros::Duration(0.05).sleep(); //50HZ
	}

    return 0;
}
